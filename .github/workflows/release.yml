name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.9']
      fail-fast: false  # Continue with other OS builds even if one fails

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev
    
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
      
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: List installed packages
      run: poetry run pip list
    
    - name: Build with PyInstaller
      run: |
        poetry run pyinstaller directory_printer.spec
      
    - name: Verify build artifacts
      run: |
        ls -la dist/
      shell: bash
    
    - name: Set version
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      shell: bash

    - name: Get Changelog Entry
      id: changelog
      if: matrix.os == 'ubuntu-latest'  # Only run once
      run: |
        # Extract the changelog content starting from the first ### section
        CHANGELOG_CONTENT=$(awk '
          /## \['"${VERSION}"'\]/ {p=1; next}
          /## \[/ {p=0}
          p && /^### / {found=1}
          p && found {print}
        ' CHANGELOG.md)
        if [ -z "$CHANGELOG_CONTENT" ]; then
          echo "Warning: No changelog entry found for version ${VERSION}"
          CHANGELOG_CONTENT="No changelog entry found for this release."
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release with Changelog
      uses: softprops/action-gh-release@v1
      if: matrix.os == 'ubuntu-latest'
      with:
        name: Release ${{ env.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

    - name: Zip Windows artifacts
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a ../directory-printer-windows-v${{ env.VERSION }}.zip directory-printer.exe
      shell: bash
    
    - name: Zip Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        zip -r ../directory-printer-linux-v${{ env.VERSION }}.zip directory-printer
      shell: bash
    
    - name: Zip macOS artifacts
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        zip -r ../directory-printer-macos-v${{ env.VERSION }}.zip directory-printer
      shell: bash
    
    - name: Upload Windows Release Asset
      uses: softprops/action-gh-release@v1
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      with:
        files: directory-printer-windows-v${{ env.VERSION }}.zip

    - name: Upload Linux Release Asset
      uses: softprops/action-gh-release@v1
      if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
      with:
        files: directory-printer-linux-v${{ env.VERSION }}.zip

    - name: Upload macOS Release Asset
      uses: softprops/action-gh-release@v1
      if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
      with:
        files: directory-printer-macos-v${{ env.VERSION }}.zip 